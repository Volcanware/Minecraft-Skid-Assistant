package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.newevent.Listener;
import com.alan.clients.newevent.annotations.EventLink;
import com.alan.clients.newevent.impl.motion.PreMotionEvent;
import com.alan.clients.newevent.impl.other.TeleportEvent;
import com.alan.clients.newevent.impl.other.WorldChangeEvent;
import com.alan.clients.newevent.impl.packet.PacketSendEvent;
import com.alan.clients.value.impl.BooleanValue;
import com.alan.clients.value.Mode;
import com.alan.clients.util.packet.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;

import java.util.concurrent.ConcurrentLinkedQueue;

public class VerusCustomDisabler extends Mode<Disabler> {

    private final BooleanValue movementDisabler = new BooleanValue("Movement", this, false);
    private final BooleanValue sprintDisabler = new BooleanValue("Sprint", this, false);

    private final ConcurrentLinkedQueue<Packet<?>> transactions = new ConcurrentLinkedQueue<>();
    private final ConcurrentLinkedQueue<Packet<?>> keepAlives = new ConcurrentLinkedQueue<>();

    private boolean teleported;

    public VerusCustomDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink()
    public final Listener<PreMotionEvent> onPreMotionEvent = event -> {

        if (movementDisabler.getValue()) {
            if (mc.thePlayer.ticksExisted % 100 == 0) {
                PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.onGround));
                PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, -0.015625, mc.thePlayer.posZ, false));
                PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.onGround));

                teleported = true;
            }
        }

        if (sprintDisabler.getValue()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer,
                    mc.thePlayer.ticksExisted % 2 == 0 ? C0BPacketEntityAction.Action.STOP_SPRINTING :
                            C0BPacketEntityAction.Action.START_SPRINTING));
        }
    };

    @EventLink()
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet<?> packet = event.getPacket();

        if (sprintDisabler.getValue() && packet instanceof C0BPacketEntityAction) {
            C0BPacketEntityAction c0b = ((C0BPacketEntityAction) packet);

            if (c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING ||
                    c0b.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                event.setCancelled(true);
            }
        }
    };

    @EventLink()
    public final Listener<TeleportEvent> onTeleport = event -> {
        if (movementDisabler.getValue()) {
            if (teleported) {
                event.setCancelled(true);
            }

            teleported = false;
        }
    };

    @EventLink()
    public final Listener<WorldChangeEvent> onWorldChange = event -> {
        transactions.clear();
        keepAlives.clear();
        teleported = false;
    };
}
package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.module.impl.movement.Speed;
import com.alan.clients.module.impl.player.NoFall;
import com.alan.clients.module.impl.player.Scaffold;
import com.alan.clients.newevent.Listener;
import com.alan.clients.newevent.annotations.EventLink;
import com.alan.clients.newevent.impl.motion.PreMotionEvent;
import com.alan.clients.newevent.impl.other.WorldChangeEvent;
import com.alan.clients.newevent.impl.packet.PacketSendEvent;
import com.alan.clients.util.packet.PacketUtil;
import com.alan.clients.util.player.MoveUtil;
import com.alan.clients.util.player.PlayerUtil;
import com.alan.clients.value.Mode;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;

import java.util.ArrayList;
import java.util.concurrent.LinkedBlockingQueue;

import static com.alan.clients.util.interfaces.InstanceAccess.mc;

/**
 * @author Auth
 * @since 02/08/2022
 */
public class WatchdogDisabler extends Mode<Disabler> {

    private final LinkedBlockingQueue<Packet<?>> pingPackets = new LinkedBlockingQueue<>();
    private final ArrayList<C03PacketPlayer> playerPackets = new ArrayList<>();

    public WatchdogDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink
    public final Listener<PreMotionEvent> onPreMotion = event -> {
        if (mc.isIntegratedServerRunning()) {
            return;
        }

        if (mc.thePlayer.fallDistance < MoveUtil.fallDistanceForDamage() && mc.thePlayer.offGroundTicks != 5 && (this.getModule(Speed.class).isEnabled() && !this.getModule(Scaffold.class).isEnabled())) {
            event.setOnGround(true);
        }
    };

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        if (mc.isIntegratedServerRunning() || event.isCancelled()) {
            return;
        }

        Packet<?> packet = event.getPacket();

        if (packet instanceof C03PacketPlayer) {
            C03PacketPlayer wrapper = (C03PacketPlayer) packet;

            PacketUtil.send(new C19PacketResourcePackStatus("", C19PacketResourcePackStatus.Action.ACCEPTED));
            PacketUtil.send(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));

            if (packet instanceof C03PacketPlayer.C06PacketPlayerPosLook && mc.thePlayer.ticksExisted <= 120) {
                PacketUtil.send(new C03PacketPlayer.C04PacketPlayerPosition(wrapper.x, wrapper.y, wrapper.z, wrapper.onGround));
                event.setCancelled();
            } else {
                if (!(this.getModule(Speed.class).isEnabled() && !this.getModule(Scaffold.class).isEnabled()) && (!this.getModule(NoFall.class).isEnabled() || mc.thePlayer.fallDistance == 0) || this.playerPackets.size() > 3) {
                    this.playerPackets.forEach(PacketUtil::sendNoEvent);
                    this.playerPackets.clear();
                } else {
                    this.playerPackets.add(wrapper);
                    event.setCancelled();
                }
            }
        } else if (packet instanceof C0FPacketConfirmTransaction) {
            if (this.pingPackets.size() > 8) {
                while (!this.pingPackets.isEmpty()) {
                    PacketUtil.sendNoEvent(this.pingPackets.remove());
                }
            }

            this.pingPackets.add(packet);
            event.setCancelled();
        } else if (packet instanceof C00PacketKeepAlive) {
            if (this.pingPackets.size() > 15) {
                while (!this.pingPackets.isEmpty()) {
                    PacketUtil.sendNoEvent(this.pingPackets.remove());
                }
            }

            this.pingPackets.add(packet);
            event.setCancelled();
        }

    };

    @EventLink
    public final Listener<WorldChangeEvent> onWorldChange = event -> {
        this.playerPackets.clear();
        this.pingPackets.clear();
    };
}